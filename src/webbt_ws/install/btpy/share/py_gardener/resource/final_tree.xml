<root>
    <BehaviorTree ID="MainTree">
        <Sequence name="root_sequence">
            <Move name="move1" />
            <Turn name="turn1" />
            <CheckObstacle name="move3" />
        </Sequence>
    </BehaviorTree>
    <Code>
        <CheckObstacle>
            import py_trees
            # import HAL
            import random
            
            class CheckObstacle(py_trees.behaviour.Behaviour):
            
                def __init__(self, name: str = "CheckObstacle"):
            
                    """Configure the name of the behaviour."""
                    super().__init__(name)
                    self.logger.debug("%s.__init__()" % (self.__class__.__name__))
            
                def setup(self, **kwargs: int) -&gt; None:
            
                    """No delayed initialisation required for this example."""
                    self.logger.debug("%s.setup()" % (self.__class__.__name__))
            
                def initialise(self) -&gt; None:
            
                    """Reset a counter variable."""
                    self.logger.debug("%s.initialise()" % (self.__class__.__name__))
                    self.counter = 0
            
                def update(self) -&gt; py_trees.common.Status:
            
                    """Increment the counter and decide on a new status."""
                    number = random.randint(-10, 5)
            
                    if (number &gt;= -10 and number &lt; -9): new_status = py_trees.common.Status.SUCCESS
                    elif (number &gt; -9 and number &lt; 4): new_status = py_trees.common.Status.RUNNING
                    else: new_status = py_trees.common.Status.FAILURE
            
                    return new_status
            
                def terminate(self, new_status: py_trees.common.Status) -&gt; None:
            
                    """Nothing to clean up in this example."""
            
                    self.logger.debug(
            
                        "%s.terminate()[%s-&gt;%s]"
            
                        % (self.__class__.__name__, self.status, new_status)
            
                    )
            
        </CheckObstacle>
        <Move>
            import py_trees
            # import HAL
            
            class Move(py_trees.behaviour.Behaviour):
            
                def __init__(self, name: str = "Move"):
            
                    """Configure the name of the behaviour."""
                    super().__init__(name)
                    self.logger.debug("%s.__init__()" % (self.__class__.__name__))
            
                def setup(self, **kwargs: int) -&gt; None:
            
                    """No delayed initialisation required for this example."""
                    self.logger.debug("%s.setup()" % (self.__class__.__name__))
            
                def initialise(self) -&gt; None:
            
                    """Reset a counter variable."""
                    self.logger.debug("%s.initialise()" % (self.__class__.__name__))
                    self.counter = 0
            
                def update(self) -&gt; py_trees.common.Status:
            
                    """Increment the counter and decide on a new status."""
                    self.counter += 1
            
                    new_status = (py_trees.common.Status.SUCCESS if self.counter == 3 else py_trees.common.Status.RUNNING)
            
                    if new_status == py_trees.common.Status.SUCCESS: self.feedback_message = "Move finished"
                    else: self.feedback_message = "Moving"
            
                    return new_status
            
                def terminate(self, new_status: py_trees.common.Status) -&gt; None:
            
                    """Nothing to clean up in this example."""
            
                    self.logger.debug(
            
                        "%s.terminate()[%s-&gt;%s]"
            
                        % (self.__class__.__name__, self.status, new_status)
            
                    )
        </Move>
        <Turn>
            import py_trees
            # import HAL
            
            class Turn(py_trees.behaviour.Behaviour):
            
                def __init__(self, name: str = "Turn"):
            
                    """Configure the name of the behaviour."""
                    super().__init__(name)
                    self.logger.debug("%s.__init__()" % (self.__class__.__name__))
            
                def setup(self, **kwargs: int) -&gt; None:
            
                    """No delayed initialisation required for this example."""
            
                    self.logger.debug("%s.setup()" % (self.__class__.__name__))
            
                def initialise(self) -&gt; None:
            
                    """Reset a counter variable."""
            
                    self.logger.debug("%s.initialise()" % (self.__class__.__name__))
                    self.counter = 0
            
                def update(self) -&gt; py_trees.common.Status:
            
                    """Increment the counter and decide on a new status."""
            
                    self.counter += 1
            
                    new_status = (py_trees.common.Status.SUCCESS if self.counter == 3 else py_trees.common.Status.RUNNING)
            
                    if new_status == py_trees.common.Status.SUCCESS: self.feedback_message = "Turn finished"
                    else: self.feedback_message = "Turning"
            
                    return new_status
            
            
                def terminate(self, new_status: py_trees.common.Status) -&gt; None:
            
                    """Nothing to clean up in this example."""
            
                    self.logger.debug(
            
                        "%s.terminate()[%s-&gt;%s]"
            
                        % (self.__class__.__name__, self.status, new_status)
            
                    )
            
        </Turn>
    </Code>
</root>