<root>
    <BehaviorTree ID="MainTree">
        <Sequence name="mseq">
            <ForceSuccess>
                <KeepRunningUntilFailure>
                    <CheckObstacle name="check1" />
                </KeepRunningUntilFailure>
            </ForceSuccess>
            <CheckObstacle name="check2" />
        </Sequence>
    </BehaviorTree>
    <Code>
        <CheckObstacle>
            import py_trees
            import random
            
            class CheckObstacle(py_trees.behaviour.Behaviour):
            
                def __init__(self, name: str = "CheckObstacle"):
            
                    """Configure the name of the behaviour."""
                    super().__init__(name)
                    self.logger.debug("%s.__init__()" % (self.__class__.__name__))
            
                def setup(self, **kwargs: int) -&gt; None:
            
                    """No delayed initialisation required for this example."""
                    self.logger.debug("%s.setup()" % (self.__class__.__name__))
            
                def initialise(self) -&gt; None:
            
                    """Reset a counter variable."""
                    self.logger.debug("%s.initialise()" % (self.__class__.__name__))
                    self.counter = 0
            
                def update(self) -&gt; py_trees.common.Status:
            
                    """Increment the counter and decide on a new status."""
                    number = random.randint(-10, 5)
            
                    if (number &gt;= -10 and number &lt; -1): new_status = py_trees.common.Status.SUCCESS
                    elif (number &gt; -1 and number &lt; 4): new_status = py_trees.common.Status.RUNNING
                    else: new_status = py_trees.common.Status.FAILURE
            
                    return new_status
            
                def terminate(self, new_status: py_trees.common.Status) -&gt; None:
            
                    """Nothing to clean up in this example."""
            
                    self.logger.debug(
            
                        "%s.terminate()[%s-&gt;%s]"
            
                        % (self.__class__.__name__, self.status, new_status)
            
                    )
            
        </CheckObstacle>
    </Code>
</root>